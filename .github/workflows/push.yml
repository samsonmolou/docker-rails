name: Continuous integration
on: push

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]

      redis:
        image: redis:latest
        ports: ["6379:6379"]

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.5
        ports: ["9200:9200"]
        options: -e="discovery.type=single-node"

    steps:
      - uses: actions/checkout@v1

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install PostgreSQL client
        run: |
          sudo apt-get -yqq install libpq-dev

      - name: Cache Ruby gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: Bundle gems
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3 --without production

      - name: Audit gems
        run: bundle exec bundle-audit check --update

      - name: Lint with RuboCop
        run: bundle exec rubocop --parallel

      - name: Cache Node modules
        uses: actions/cache@v1
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node modules
        run: yarn install

      - name: Run Tests
        env:
          DB_HOST: localhost
          DB_USER: postgres
          RAILS_ENV: test
          SECRET_KEY_BASE: we-dont-need-a-secret-here
          APP_ADMIN_EMAIL: admin@example.org
          APP_ADMIN_PASSWORD: secret
          APP_EMAIL: reply@example.org
          APP_HOST: example.org
          AWS_ACCESS_KEY_ID: my-access-key
          AWS_SECRET_ACCESS_KEY: my-secret
          AWS_BUCKET: my-bucket
          AWS_REGION: eu-central-1
        run: |
          bundle exec rake db:create db:schema:load
          bundle exec rake spec

  build:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v1

      - name: Build the production image
        run: |
          export COMMIT_TIME=$(git show -s --format=%ci ${GITHUB_SHA})
          export COMMIT_SHA=${GITHUB_SHA}
          docker-compose -f docker-compose.production.yml build --pull

      - name: Save Docker image as file
        run: docker save dockerrails_app_production | gzip > untested.tar.gz

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: docker-image
          path: untested.tar.gz

  deploy:
    needs: [test, build]

    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v1

      - name: Download Docker image from build job
        uses: actions/download-artifact@v1
        with:
          name: docker-image

      - name: Load Docker image from file
        shell: bash
        run: docker load < docker-image/untested.tar.gz

      - name: Login to GitLab Docker Registry
        run: echo ${{ secrets.GITLAB_TOKEN }} | docker login -u gitlab-ci-token --password-stdin ${{ secrets.GITLAB_REGISTRY }}

      - name: Push the image as LATEST and deploy
        if: github.ref == 'refs/heads/develop'
        run: |
          docker tag dockerrails_app_production ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:latest
          docker push ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:latest
          curl -X POST ${{ secrets.DEPLOY_HOOK_APP }}
          curl -X POST ${{ secrets.DEPLOY_HOOK_WORKER }}

      - name: Push the image as STABLE
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag dockerrails_app_production ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:stable
          docker push ${{ secrets.GITLAB_REGISTRY }}/${{ secrets.GITLAB_REPO }}:stable
